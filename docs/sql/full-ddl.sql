-- DROP SCHEMA "CarManager_DB";

CREATE SCHEMA "CarManager_DB" AUTHORIZATION iee2021035;

-- DROP SEQUENCE car_id_seq;

CREATE SEQUENCE car_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE customer_id_seq;

CREATE SEQUENCE customer_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE employee_id_seq;

CREATE SEQUENCE employee_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE manufacturer_id_seq;

CREATE SEQUENCE manufacturer_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE model_id_seq;

CREATE SEQUENCE model_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE person_id_seq;

CREATE SEQUENCE person_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE sales_id_seq;

CREATE SEQUENCE sales_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;
-- DROP SEQUENCE service_id_seq;

CREATE SEQUENCE service_id_seq
	INCREMENT BY 1
	MINVALUE 1
	MAXVALUE 2147483647
	START 1
	CACHE 1
	NO CYCLE;-- "CarManager_DB".car_logs definition

-- Drop table

-- DROP TABLE car_logs;

CREATE TABLE car_logs (
	operation varchar NOT NULL,
	"timestamp" timestamp NOT NULL,
	license_plate varchar NOT NULL,
	price float4 NOT NULL,
	model varchar NOT NULL,
	manufacturer varchar NOT NULL
);


-- "CarManager_DB".employee_logs definition

-- Drop table

-- DROP TABLE employee_logs;

CREATE TABLE employee_logs (
	"timestamp" timestamp NOT NULL,
	fname varchar NOT NULL,
	lname varchar NOT NULL,
	email varchar NOT NULL,
	salary float4 NOT NULL,
	operation varchar NOT NULL
);


-- "CarManager_DB".manufacturer definition

-- Drop table

-- DROP TABLE manufacturer;

CREATE TABLE manufacturer (
	"name" varchar NOT NULL,
	"location" varchar NOT NULL,
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	CONSTRAINT manufacturer_pk PRIMARY KEY (id),
	CONSTRAINT manufacturer_unique UNIQUE (name)
);


-- "CarManager_DB".person definition

-- Drop table

-- DROP TABLE person;

CREATE TABLE person (
	fname varchar NOT NULL,
	lname varchar NOT NULL,
	birth_year int4 NOT NULL,
	gender int4 NOT NULL,
	email varchar NOT NULL,
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	CONSTRAINT person_pk PRIMARY KEY (id),
	CONSTRAINT person_unique UNIQUE (email)
);


-- "CarManager_DB".service definition

-- Drop table

-- DROP TABLE service;

CREATE TABLE service (
	tires bool DEFAULT false NULL,
	engine bool DEFAULT false NULL,
	brakes bool DEFAULT false NULL,
	oil bool DEFAULT false NULL,
	battery bool DEFAULT false NULL,
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	"date" date NULL,
	CONSTRAINT service_pk PRIMARY KEY (id)
);


-- "CarManager_DB".customer definition

-- Drop table

-- DROP TABLE customer;

CREATE TABLE customer (
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	customer_person_fk int4 NOT NULL,
	CONSTRAINT customer_pk PRIMARY KEY (id),
	CONSTRAINT customer_person_fk FOREIGN KEY (customer_person_fk) REFERENCES person(id) ON DELETE CASCADE
);


-- "CarManager_DB".employee definition

-- Drop table

-- DROP TABLE employee;

CREATE TABLE employee (
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	employee_person_fk int4 NOT NULL,
	salary float4 NOT NULL,
	CONSTRAINT employee_pk PRIMARY KEY (id),
	CONSTRAINT employee_person_fk FOREIGN KEY (employee_person_fk) REFERENCES person(id) ON DELETE CASCADE
);

-- Table Triggers

create trigger employee_logs_trigger before
insert
    or
delete
    or
update
    on
    "CarManager_DB".employee for each row execute function "CarManager_DB".create_employee_log();


-- "CarManager_DB".model definition

-- Drop table

-- DROP TABLE model;

CREATE TABLE model (
	"type" int4 DEFAULT 0 NULL,
	"year" int4 NOT NULL,
	hp int4 NOT NULL,
	wd int4 DEFAULT 0 NULL,
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	"name" varchar NOT NULL,
	model_manufacturer_fk int4 NOT NULL,
	CONSTRAINT model_pk PRIMARY KEY (id),
	CONSTRAINT model_unique UNIQUE (type, year, hp, wd, name, model_manufacturer_fk),
	CONSTRAINT model_manufacturer_fk FOREIGN KEY (model_manufacturer_fk) REFERENCES manufacturer(id)
);


-- "CarManager_DB".car definition

-- Drop table

-- DROP TABLE car;

CREATE TABLE car (
	license_plate varchar NOT NULL,
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	car_model_fk int4 NOT NULL,
	car_service_fk int4 NOT NULL,
	price float4 NOT NULL,
	sold bool DEFAULT false NOT NULL,
	CONSTRAINT car_pk PRIMARY KEY (id),
	CONSTRAINT car_unique UNIQUE (license_plate),
	CONSTRAINT car_model_fk FOREIGN KEY (car_model_fk) REFERENCES model(id),
	CONSTRAINT car_service_fk FOREIGN KEY (car_service_fk) REFERENCES service(id) ON DELETE CASCADE
);

-- Table Triggers

create trigger car_logs_trigger before
insert
    or
delete
    or
update
    on
    "CarManager_DB".car for each row execute function "CarManager_DB".create_car_log();


-- "CarManager_DB".sales definition

-- Drop table

-- DROP TABLE sales;

CREATE TABLE sales (
	id int4 GENERATED BY DEFAULT AS IDENTITY( INCREMENT BY 1 MINVALUE 1 MAXVALUE 2147483647 START 1 CACHE 1 NO CYCLE) NOT NULL,
	discount float4 DEFAULT 0.0 NULL,
	"date" date NOT NULL,
	sales_car_fk int4 NOT NULL,
	sales_customer_fk int4 NOT NULL,
	sales_employee_fk int4 NOT NULL,
	price float4 NOT NULL,
	CONSTRAINT sales_pk PRIMARY KEY (id),
	CONSTRAINT sales_car_fk FOREIGN KEY (sales_car_fk) REFERENCES car(id),
	CONSTRAINT sales_customer_fk FOREIGN KEY (sales_customer_fk) REFERENCES customer(id),
	CONSTRAINT sales_employee_fk FOREIGN KEY (sales_employee_fk) REFERENCES employee(id)
);



-- DROP FUNCTION "CarManager_DB".create_car_log();

CREATE OR REPLACE FUNCTION "CarManager_DB".create_car_log()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE
        car_model varchar;
        car_manufacturer varchar;
		t timestamp;
    BEGIN
		SELECT to_char(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') INTO t;

        -- Fetch model and manufacturer based on the car's model foreign key
        IF (TG_OP = 'DELETE') THEN
            SELECT m.name, mf.name
            INTO car_model, car_manufacturer
            FROM "CarManager_DB".model m
            JOIN "CarManager_DB".manufacturer mf ON m.model_manufacturer_fk = mf.id
            WHERE m.id = OLD.car_model_fk;

            INSERT INTO "CarManager_DB".car_logs
            VALUES ('DELETE', t, OLD.license_plate, OLD.price, car_model, car_manufacturer);
            RETURN OLD;

        ELSE
            -- For INSERT or UPDATE, use NEW
            SELECT m.name, mf.name
            INTO car_model, car_manufacturer
            FROM "CarManager_DB".model m
            JOIN "CarManager_DB".manufacturer mf ON m.model_manufacturer_fk = mf.id
            WHERE m.id = NEW.car_model_fk;

            IF (TG_OP = 'UPDATE') THEN
                INSERT INTO "CarManager_DB".car_logs
                VALUES ('UPDATE', t, NEW.license_plate, NEW.price, car_model, car_manufacturer);
                RETURN NEW;

            ELSIF (TG_OP = 'INSERT') THEN
                INSERT INTO "CarManager_DB".car_logs
                VALUES ('INSERT', t, NEW.license_plate, NEW.price, car_model, car_manufacturer);
                RETURN NEW;
            END IF;
        END IF;

        RETURN NULL;
    END;
$function$
;

-- DROP FUNCTION "CarManager_DB".create_employee_log();

CREATE OR REPLACE FUNCTION "CarManager_DB".create_employee_log()
 RETURNS trigger
 LANGUAGE plpgsql
AS $function$
    DECLARE
        fname varchar;
        lname varchar;
		email varchar;
		t timestamp;
    BEGIN
		SELECT to_char(CURRENT_TIMESTAMP, 'YYYY-MM-DD HH24:MI:SS') INTO t;

        -- Fetch model and manufacturer based on the car's model foreign key
        IF (TG_OP = 'DELETE') THEN
			SELECT p.fname, p.lname, p.email
			INTO fname, lname, email
			FROM "CarManager_DB".person p
			WHERE p.id = OLD.employee_person_fk;

            INSERT INTO "CarManager_DB".employee_logs (
				operation, timestamp, salary, fname, lname, email
			)
            VALUES ('DELETE', t, OLD.salary, fname, lname, email);
            RETURN OLD;

        ELSE
            -- For INSERT or UPDATE, use NEW
            SELECT p.fname, p.lname, p.email
			INTO fname, lname, email
			FROM "CarManager_DB".person p
			WHERE p.id = NEW.employee_person_fk;

            IF (TG_OP = 'UPDATE') THEN
                INSERT INTO "CarManager_DB".employee_logs (
					operation, timestamp, salary, fname, lname, email
				)
                VALUES ('UPDATE', t, NEW.salary, fname, lname, email);
                RETURN NEW;

            ELSIF (TG_OP = 'INSERT') THEN
                INSERT INTO "CarManager_DB".employee_logs (
					operation, timestamp, salary, fname, lname, email
				)
                VALUES ('INSERT', t, NEW.salary, fname, lname, email);
                RETURN NEW;
            END IF;
        END IF;

        RETURN NULL;
    END;
$function$
;

-- DROP PROCEDURE "CarManager_DB".delete_car(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_car(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
    service_fk integer;
BEGIN
    SELECT car_service_fk INTO service_fk
    FROM "CarManager_DB".car
    WHERE id = param_id;

    DELETE FROM "CarManager_DB".car
    WHERE id = param_id;

	DELETE FROM "CarManager_DB".service
	WHERE id = service_fk;
END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_car(varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_car(IN param_license_plate character varying)
 LANGUAGE plpgsql
AS $procedure$
declare
    service_fk integer;

begin
select
	car_service_fk
into
	service_fk
from
	"CarManager_DB".car
where
	license_plate = param_license_plate;

delete
from
	"CarManager_DB".car
where
	license_plate = param_license_plate;

delete
from
	"CarManager_DB".service
where
	id = service_fk;
end;

$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_customer(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_customer(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	customer_fk int4;
	person_fk int4;
begin
	select id into customer_fk from "CarManager_DB".Customer;
	select customer_person_fk into person_fk from "CarManager_DB".Customer;

	delete from "CarManager_DB".Sales where sales_customer_fk = customer_fk;
	delete from "CarManager_DB".Customer where id = param_id;
	delete from "CarManager_DB".Person where id = person_fk;
end;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_employee(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_employee(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
declare
	employee_fk int4;
	person_fk int4;
begin
	select id into employee_fk from "CarManager_DB".Employee;
	select employee_person_fk into person_fk from "CarManager_DB".Employee;

	delete from "CarManager_DB".Sales where sales_employee_fk = employee_fk;
	delete from "CarManager_DB".Employee where id = param_id;
	delete from "CarManager_DB".Person where id = person_fk;
end;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_manufacturer(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_manufacturer(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		DELETE FROM Manufacturer WHERE id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_manufacturer(varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_manufacturer(IN param_name character varying)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		DELETE FROM Manufacturer WHERE name = param_name;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_model(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_model(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		DELETE FROM "CarManager_DB".Model WHERE id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".delete_sale(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".delete_sale(IN param_id integer)
 LANGUAGE plpgsql
AS $procedure$
	DECLARE
		car_id int;
	BEGIN
		SELECT sales_car_fk INTO car_id
		FROM "CarManager_DB".sales
		WHERE id = param_id;

		UPDATE "CarManager_DB".car
		SET sold = false
		WHERE id = car_id;

		DELETE FROM "CarManager_DB".sales
		WHERE id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".grant_schema_privileges(text);

CREATE OR REPLACE PROCEDURE "CarManager_DB".grant_schema_privileges(IN user_name text)
 LANGUAGE plpgsql
AS $procedure$
BEGIN
    -- Grant USAGE on the schema
    EXECUTE format('GRANT USAGE ON SCHEMA "CarManager_DB" TO %I;', user_name);

    -- Grant privileges on existing tables
    EXECUTE format(
        'GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA "CarManager_DB" TO %I;',
        user_name
    );

    -- Grant privileges on existing sequences
    EXECUTE format(
        'GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA "CarManager_DB" TO %I;',
        user_name
    );

    -- Grant privileges on existing functions
    EXECUTE format(
        'GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA "CarManager_DB" TO %I;',
        user_name
    );

    -- Set default privileges for future tables
    EXECUTE format(
        'ALTER DEFAULT PRIVILEGES IN SCHEMA "CarManager_DB" GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO %I;',
        user_name
    );

    -- Set default privileges for future sequences
    EXECUTE format(
        'ALTER DEFAULT PRIVILEGES IN SCHEMA "CarManager_DB" GRANT USAGE, SELECT ON SEQUENCES TO %I;',
        user_name
    );

    -- Set default privileges for future functions
    EXECUTE format(
        'ALTER DEFAULT PRIVILEGES IN SCHEMA "CarManager_DB" GRANT EXECUTE ON FUNCTIONS TO %I;',
        user_name
    );

    RAISE NOTICE 'Privileges granted to user %', user_name;
END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_car(varchar, float4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_car(IN param_license_plate character varying, IN param_price real, IN param_model_id integer)
 LANGUAGE plpgsql
AS $procedure$
DECLARE
    service_id INT4;
BEGIN
    -- Insert a new service record and get its ID
    INSERT INTO "CarManager_DB".service DEFAULT VALUES
    RETURNING id INTO service_id;

    -- Insert the car record with the foreign key referencing the new service ID
    INSERT INTO "CarManager_DB".car (
        license_plate,
        price,
        car_model_fk,
        car_service_fk
    )
    VALUES (
        param_license_plate,
        param_price,
        param_model_id,
        service_id
    );
END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_customer(int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_customer(IN param_person_id integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		INSERT INTO "CarManager_DB".Customer (
			customer_person_fk
		)
		VALUES (
			param_person_id
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_customer(varchar, varchar, int4, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_customer(IN param_fname character varying, IN param_lname character varying, IN param_birth_year integer, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	DECLARE
		person_id int4;
	BEGIN
		INSERT INTO "CarManager_DB".Person (
			fname,
			lname,
			birth_year,
			gender,
			email
		)
		VALUES (
			param_fname,
			param_lname,
			param_birth_year,
			param_gender,
			param_email
		)
		RETURNING id INTO person_id;

		INSERT INTO "CarManager_DB".Customer (
			customer_person_fk
		)
		VALUES (
			person_id
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_customer(int4, varchar, varchar, varchar, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_customer(IN param_person_id integer, IN param_fname character varying, IN param_lname character varying, IN param_birth_year character varying, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		INSERT INTO "CarManager_DB".Person (
			fname,
			lname,
			birth_year,
			gender,
			email
		)
		VALUES (
			param_fname,
			param_lname,
			param_birth_year,
			param_gender,
			param_email
		);

		INSERT INTO "CarManager_DB".Customer (
			customer_person_fk
		)
		VALUES (
			param_person_id
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_employee(float4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_employee(IN param_salary real)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		INSERT INTO "CarManager_DB".Employee (
			salary
		)
		VALUES (
			param_salary
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_employee(float4, varchar, varchar, int4, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_employee(IN param_salary real, IN param_fname character varying, IN param_lname character varying, IN param_birth_year integer, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	DECLARE
		person_id int4;
	BEGIN
		INSERT INTO "CarManager_DB".Person (
			fname,
			lname,
			birth_year,
			gender,
			email
		)
		VALUES (
			param_fname,
			param_lname,
			param_birth_year,
			param_gender,
			param_email
		)
		RETURNING id INTO person_id;

		INSERT INTO "CarManager_DB".Employee (
			employee_person_fk,
			salary
		)
		VALUES (
			person_id,
			param_salary
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_manufacturer(varchar, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_manufacturer(IN param_name character varying, IN param_location character varying)
 LANGUAGE plpgsql
AS $procedure$
BEGIN
    INSERT INTO Manufacturer (name, location) VALUES (param_name, param_location);
END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_model(varchar, int4, int4, int4, int4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_model(IN param_name character varying, IN param_type integer, IN param_year integer, IN param_hp integer, IN param_wd integer, IN param_man_id integer)
 LANGUAGE plpgsql
AS $procedure$
	begin
		insert
	into
	"CarManager_DB".model (
			"name",
			"type",
			"year",
			hp,
			wd,
			model_manufacturer_fk
		)
values (
			param_name,
			param_type,
			param_year,
			param_hp,
			param_wd,
			param_man_id);
end;

$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_person(varchar, varchar, varchar, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_person(IN param_fname character varying, IN param_lname character varying, IN param_birth_year character varying, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		INSERT INTO "CarManager_DB".Person (
			fname,
			lname,
			birth_year,
			gender,
			email
		)
		VALUES (
			param_fname,
			param_lname,
			param_birth_year,
			param_gender,
			param_email
		);
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".insert_sale(float4, float4, int4, int4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".insert_sale(IN param_price real, IN param_discount real, IN param_car_fk integer, IN param_employee_fk integer, IN param_customer_fk integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		UPDATE "CarManager_DB".car
		SET
			sold = true
		WHERE id = param_car_fk;

		INSERT INTO "CarManager_DB".sales (
			price,
			discount,
			sales_car_fk,
			sales_employee_fk,
			sales_customer_fk,
			"date"
		) VALUES (
			param_price,
			param_discount,
			param_car_fk,
			param_employee_fk,
			param_customer_fk,
			now()
		);

	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".populate_manufacturer();

CREATE OR REPLACE PROCEDURE "CarManager_DB".populate_manufacturer()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
    INSERT INTO Manufacturer (name, location) VALUES ('Ford', 'USA');
    INSERT INTO Manufacturer (name, location) VALUES ('Toyota', 'Japan');
    INSERT INTO Manufacturer (name, location) VALUES ('Volkswagen', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Hyundai', 'South Korea');
    INSERT INTO Manufacturer (name, location) VALUES ('BMW', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Honda', 'Japan');
    INSERT INTO Manufacturer (name, location) VALUES ('Nissan', 'Japan');
    INSERT INTO Manufacturer (name, location) VALUES ('Chevrolet', 'USA');
    INSERT INTO Manufacturer (name, location) VALUES ('Mercedes-Benz', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Audi', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Kia', 'South Korea');
    INSERT INTO Manufacturer (name, location) VALUES ('Renault', 'France');
    INSERT INTO Manufacturer (name, location) VALUES ('Peugeot', 'France');
    INSERT INTO Manufacturer (name, location) VALUES ('Fiat', 'Italy');
    INSERT INTO Manufacturer (name, location) VALUES ('Porsche', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Jeep', 'USA');
    INSERT INTO Manufacturer (name, location) VALUES ('Mazda', 'Japan');
    INSERT INTO Manufacturer (name, location) VALUES ('Subaru', 'Japan');
    INSERT INTO Manufacturer (name, location) VALUES ('Land Rover', 'UK');
    INSERT INTO Manufacturer (name, location) VALUES ('Jaguar', 'UK');
    INSERT INTO Manufacturer (name, location) VALUES ('Volvo', 'Sweden');
    INSERT INTO Manufacturer (name, location) VALUES ('Tesla', 'USA');
    INSERT INTO Manufacturer (name, location) VALUES ('Ferrari', 'Italy');
    INSERT INTO Manufacturer (name, location) VALUES ('Lamborghini', 'Italy');
    INSERT INTO Manufacturer (name, location) VALUES ('Maserati', 'Italy');
    INSERT INTO Manufacturer (name, location) VALUES ('Bentley', 'UK');
    INSERT INTO Manufacturer (name, location) VALUES ('Rolls-Royce', 'UK');
    INSERT INTO Manufacturer (name, location) VALUES ('Saab', 'Sweden');
    INSERT INTO Manufacturer (name, location) VALUES ('Opel', 'Germany');
    INSERT INTO Manufacturer (name, location) VALUES ('Citroën', 'France');
    INSERT INTO Manufacturer (name, location) VALUES ('Alfa Romeo', 'Italy');
    INSERT INTO Manufacturer (name, location) VALUES ('Dacia', 'Romania');
    INSERT INTO Manufacturer (name, location) VALUES ('Tata Motors', 'India');
    INSERT INTO Manufacturer (name, location) VALUES ('Mahindra', 'India');
    INSERT INTO Manufacturer (name, location) VALUES ('Chery', 'China');
    INSERT INTO Manufacturer (name, location) VALUES ('Geely', 'China');
    INSERT INTO Manufacturer (name, location) VALUES ('BYD', 'China');
    INSERT INTO Manufacturer (name, location) VALUES ('Holden', 'Australia');
    INSERT INTO Manufacturer (name, location) VALUES ('Seat', 'Spain');

END
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".populate_model();

CREATE OR REPLACE PROCEDURE "CarManager_DB".populate_model()
 LANGUAGE plpgsql
AS $procedure$
BEGIN
    -- Insert Ford models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (6, 2022, 450, 1, 'Mustang', 51) ON CONFLICT DO NOTHING; -- Sports, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (3, 2023, 500, 1, 'F-150', 51) ON CONFLICT DO NOTHING; -- Truck, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2021, 250, 1, 'Explorer', 51) ON CONFLICT DO NOTHING; -- SUV, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 400, 4, 'Bronco', 51) ON CONFLICT DO NOTHING; -- SUV, AWD

    -- Insert Toyota models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (0, 2022, 300, 0, 'Camry', 52) ON CONFLICT DO NOTHING; -- Sedan, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 250, 1, 'RAV4', 52) ON CONFLICT DO NOTHING; -- SUV, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (2, 2021, 180, 0, 'Corolla', 52) ON CONFLICT DO NOTHING; -- Hatchback, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (4, 2023, 302, 4, 'Highlander', 52) ON CONFLICT DO NOTHING; -- Minivan, AWD

    -- Insert Volkswagen models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (2, 2022, 170, 0, 'Golf', 53) ON CONFLICT DO NOTHING; -- Hatchback, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 220, 4, 'Tiguan', 53) ON CONFLICT DO NOTHING; -- SUV, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2021, 290, 4, 'Atlas', 53) ON CONFLICT DO NOTHING; -- SUV, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (5, 2023, 315, 1, 'Arteon', 53) ON CONFLICT DO NOTHING; -- Luxury, 4WD

    -- Insert BMW models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2022, 335, 4, 'X5', 55) ON CONFLICT DO NOTHING; -- SUV, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (6, 2023, 382, 1, 'M3', 55) ON CONFLICT DO NOTHING; -- Sports, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (6, 2021, 473, 4, 'M4', 55) ON CONFLICT DO NOTHING; -- Sports, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (6, 2023, 617, 1, 'M5', 55) ON CONFLICT DO NOTHING; -- Sports, 4WD

    -- Insert Honda models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (0, 2022, 158, 0, 'Civic', 56) ON CONFLICT DO NOTHING; -- Sedan, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 190, 1, 'CR-V', 56) ON CONFLICT DO NOTHING; -- SUV, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (0, 2021, 280, 0, 'Accord', 56) ON CONFLICT DO NOTHING; -- Sedan, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 212, 4, 'Pilot', 56) ON CONFLICT DO NOTHING; -- SUV, AWD

    -- Insert Audi models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (0, 2022, 201, 0, 'A3', 60) ON CONFLICT DO NOTHING; -- Sedan, 2WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 349, 1, 'Q5', 60) ON CONFLICT DO NOTHING; -- SUV, 4WD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (5, 2021, 591, 4, 'RS7', 60) ON CONFLICT DO NOTHING; -- Luxury, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2023, 335, 4, 'Q7', 60) ON CONFLICT DO NOTHING; -- SUV, AWD

    -- Insert Tesla models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (8, 2022, 670, 4, 'Model S', 72) ON CONFLICT DO NOTHING; -- Electric, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (8, 2023, 283, 4, 'Model 3', 72) ON CONFLICT DO NOTHING; -- Electric, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (8, 2021, 311, 4, 'Model X', 72) ON CONFLICT DO NOTHING; -- Electric, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (8, 2023, 480, 4, 'Model Y', 72) ON CONFLICT DO NOTHING; -- Electric, AWD

    -- Insert Mercedes-Benz models
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (1, 2022, 255, 4, 'GLA', 59) ON CONFLICT DO NOTHING; -- SUV, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (5, 2023, 429, 4, 'E-Class', 59) ON CONFLICT DO NOTHING; -- Luxury, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (6, 2021, 577, 4, 'AMG GT', 59) ON CONFLICT DO NOTHING; -- Sports, AWD
    INSERT INTO "CarManager_DB".model ("type", "year", hp, wd, name, model_manufacturer_fk)
    VALUES (5, 2023, 603, 4, 'S-Class', 59) ON CONFLICT DO NOTHING; -- Luxury, AWD

    -- Additional models for other manufacturers can be added similarly
END;
$procedure$
;

-- DROP FUNCTION "CarManager_DB".select_all_car_logs();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_car_logs()
 RETURNS SETOF "CarManager_DB".car_logs
 LANGUAGE plpgsql
AS $function$
	BEGIN
		return query (
			SELECT * FROM "CarManager_DB".car_logs
		);
	END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_cars();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_cars()
 RETURNS SETOF "CarManager_DB".car
 LANGUAGE plpgsql
AS $function$
begin
	return query (
		select *
		from "CarManager_DB".Car
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_cars__();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_cars__()
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_customers__();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_customers__()
 RETURNS TABLE(id integer, customer_person_fk integer, fname character varying, lname character varying, email character varying, birth_year integer, gender integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            customer.id,
			person.id,
            person.fname,
			person.lname,
			person.email,
			person.birth_year,
			person.gender
      	FROM
            "CarManager_DB".customer
        JOIN
            "CarManager_DB".person ON customer.customer_person_fk = person.id
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_employee_logs();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_employee_logs()
 RETURNS SETOF "CarManager_DB".employee_logs
 LANGUAGE plpgsql
AS $function$
	BEGIN
		return query (
			SELECT * FROM "CarManager_DB".employee_logs
		);
	END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_employees__();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_employees__()
 RETURNS TABLE(id integer, salary real, employee_person_fk integer, fname character varying, lname character varying, email character varying, birth_year integer, gender integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            employee.id,
			employee.salary,
			employee.employee_person_fk,
            person.fname,
			person.lname,
			person.email,
			person.birth_year,
			person.gender
      	FROM
            "CarManager_DB".employee
        JOIN
            "CarManager_DB".person ON employee.employee_person_fk = person.id -- Join on the foreign key
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_manufacturers();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_manufacturers()
 RETURNS SETOF "CarManager_DB".manufacturer
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT *
    FROM "CarManager_DB".Manufacturer;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_models();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_models()
 RETURNS SETOF "CarManager_DB".model
 LANGUAGE plpgsql
AS $function$
begin
	return query (
		select *
		from "CarManager_DB".model
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_persons();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_persons()
 RETURNS SETOF "CarManager_DB".person
 LANGUAGE plpgsql
AS $function$
begin
	return query (
		select *
		from "CarManager_DB".person
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_sales();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_sales()
 RETURNS SETOF "CarManager_DB".sales
 LANGUAGE plpgsql
AS $function$
begin
	return query (
		select *
		from "CarManager_DB".sales
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_sales__();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_sales__()
 RETURNS TABLE(sale_id integer, sale_date date, sale_price real, sale_discount real, car_id integer, car_license_plate character varying, car_price real, car_model_name character varying, car_model_year integer, car_manufacturer_name character varying, customer_id integer, customer_name character varying, customer_email character varying, employee_id integer, employee_name character varying, employee_email character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        s.id AS sale_id,
        s.date AS sale_date,
        s.price AS sale_price,
        s.discount AS sale_discount,
        c.id AS car_id,
        c.license_plate AS car_license_plate,
        c.price AS car_price,
        m.name AS car_model_name,
        m.year AS car_model_year,
        manu.name AS car_manufacturer_name,
        cust.id AS customer_id,
        (cust_person.fname || ' ' || cust_person.lname)::character varying AS customer_name,
        cust_person.email::character varying AS customer_email,
        emp.id AS employee_id,
        (emp_person.fname || ' ' || emp_person.lname)::character varying AS employee_name,
        emp_person.email::character varying AS employee_email
    FROM "CarManager_DB".sales s
    JOIN "CarManager_DB".car c ON s.sales_car_fk = c.id
    JOIN "CarManager_DB".model m ON c.car_model_fk = m.id
    JOIN "CarManager_DB".manufacturer manu ON m.model_manufacturer_fk = manu.id
    JOIN "CarManager_DB".customer cust ON s.sales_customer_fk = cust.id
    JOIN "CarManager_DB".person cust_person ON cust.customer_person_fk = cust_person.id
    JOIN "CarManager_DB".employee emp ON s.sales_employee_fk = emp.id
    JOIN "CarManager_DB".person emp_person ON emp.employee_person_fk = emp_person.id;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_all_services();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_all_services()
 RETURNS SETOF "CarManager_DB".service
 LANGUAGE plpgsql
AS $function$
begin
	return query (
		select *
		from "CarManager_DB".service
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_car_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_car_by_id(_car_id integer)
 RETURNS TABLE(car_licence_plate character varying, car_id integer, car_price money)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager_DB".Car where id = _car_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_manufacturer(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_manufacturer(param_manufacturer_name character varying)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE manufacturer.name = param_manufacturer_name
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_model(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_model(param_model_id integer)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE model.id = param_model_id
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_price(float4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_price(param_price real)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE car.price = param_price
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_price_greater(float4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_price_greater(param_price real)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE car.price >= param_price
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_price_less(float4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_price_less(param_price real)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE car.price <= param_price
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_service_completed();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_service_completed()
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE service.engine = true
		AND service.tires = true
		AND service.oil = true
		AND service.brakes = true
		AND service.battery = true
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_service_not_completed();

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_service_not_completed()
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE service.engine = false
		OR service.tires = false
		OR service.oil = false
		OR service.brakes = false
		OR service.battery = false
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_sold(bool);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_sold(param_sold boolean)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
		WHERE car.sold = param_sold
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_cars_by_sold_and_repaired(bool);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_cars_by_sold_and_repaired(param_sold boolean)
 RETURNS TABLE(car_id integer, car_license_plate character varying, car_price real, model_id integer, model_name character varying, model_type integer, model_year integer, model_wd integer, model_hp integer, manufacturer_id integer, manufacturer_name character varying, manufacturer_location character varying, service_id integer, service_date date, service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            car.id AS car_id,
            car.license_plate AS car_license_plate,
            car.price AS car_price,
            model.id AS model_id,
            model.name AS model_name,
            model.type AS model_type,
            model.year AS model_year,
            model.wd AS model_wd,
            model.hp AS model_hp,
            manufacturer.id AS manufacturer_id,
            manufacturer.name AS manufacturer_name,
            manufacturer.location AS manufacturer_location,
            service.id AS service_id,
            service.date AS service_date,
            service.tires AS service_tires,
            service.engine AS service_engine,
            service.brakes AS service_brakes,
            service.oil AS service_oil,
            service.battery AS service_battery
        FROM "CarManager_DB".car car
        JOIN "CarManager_DB".model model ON model.id = car.car_model_fk
        JOIN "CarManager_DB".manufacturer manufacturer ON manufacturer.id = model.model_manufacturer_fk
        JOIN "CarManager_DB".service service ON service.id = car.car_service_fk
        WHERE car.sold = param_sold
          AND service.tires = true
          AND service.engine = true
          AND service.brakes = true
          AND service.oil = true
          AND service.battery = true
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_customer_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_customer_by_id(_customer_id integer)
 RETURNS TABLE(customer_uui uuid, customer_id integer)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Customer where id = _customer_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_customers_by_email(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_customers_by_email(param_customer_email character varying)
 RETURNS TABLE(id integer, customer_person_fk integer, fname character varying, lname character varying, email character varying, birth_year integer, gender integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            customer.id,
			person.id,
            person.fname,
			person.lname,
			person.email,
			person.birth_year,
			person.gender
      	FROM
            "CarManager_DB".customer
        JOIN
            "CarManager_DB".person ON customer.customer_person_fk = person.id
		WHERE person.email = param_customer_email
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_employee_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_employee_by_id(_employee_id integer)
 RETURNS TABLE(employee_salary money, employee_id integer)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Emloyee where id = _employee_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_employees_by_email(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_employees_by_email(param_employee_email character varying)
 RETURNS TABLE(id integer, salary real, employee_person_fk integer, fname character varying, lname character varying, email character varying, birth_year integer, gender integer)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY (
        SELECT
            employee.id,
			employee.salary,
			employee.employee_person_fk,
            person.fname,
			person.lname,
			person.email,
			person.birth_year,
			person.gender
      	FROM
            "CarManager_DB".employee
        JOIN
            "CarManager_DB".person ON employee.employee_person_fk = person.id -- Join on the foreign key
		WHERE person.email = param_employee_email
    );
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_manufacturer_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_manufacturer_by_id(_manufacturer_id integer)
 RETURNS TABLE(manufacturer_name character varying, manufacturer_location character varying, manufacturer_id integer)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Manufacturer where id = _manufacturer_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_manufacturers_by_location(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_manufacturers_by_location(param_location character varying)
 RETURNS SETOF "CarManager_DB".manufacturer
 LANGUAGE plpgsql
AS $function$
	begin
		return QUERY
    select
	*
from
	"CarManager_DB".Manufacturer
where
	location = param_location;
end;

$function$
;

-- DROP FUNCTION "CarManager_DB".select_manufacturers_by_name(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_manufacturers_by_name(param_name character varying)
 RETURNS SETOF "CarManager_DB".manufacturer
 LANGUAGE plpgsql
AS $function$
	begin
		return QUERY
    select
	*
from
	"CarManager_DB".Manufacturer
where
	name = param_name;
end;

$function$
;

-- DROP FUNCTION "CarManager_DB".select_model_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_model_by_id(_model_id integer)
 RETURNS TABLE(model_type integer, model_year integer, model_hp integer, model_wd integer, model_id integer, model_name character varying)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Model where id = _model_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_models_by_manufacturer(varchar);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_models_by_manufacturer(param_manufacturer character varying)
 RETURNS TABLE(model_id integer, model_name character varying, model_type integer, model_year integer, model_hp integer, model_wd integer, man_name character varying)
 LANGUAGE plpgsql
AS $function$
	BEGIN
		RETURN QUERY (
			SELECT
				model.id,
				model.name,
				model.type,
				model.year,
				model.hp,
				model.wd,
				manufacturer.name
			FROM "CarManager_DB".model model
			JOIN "CarManager_DB".manufacturer manufacturer ON model.model_manufacturer_fk = manufacturer.id
			WHERE
				manufacturer.name = param_manufacturer
		);
	END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_person_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_person_by_id(_person_id integer)
 RETURNS TABLE(person_fname character varying, person_lname character varying, person_birth_year character varying, person_gender integer, person_email character varying, person_id character varying)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Person where id = _person_id
	);
end;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_sale_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_sale_by_id(param_sale_id integer)
 RETURNS TABLE(sale_id integer, sale_date date, sale_price real, sale_discount real, car_id integer, car_license_plate character varying, car_price real, car_model_name character varying, car_model_year integer, car_manufacturer_name character varying, customer_id integer, customer_name character varying, customer_email character varying, employee_id integer, employee_name character varying, employee_email character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        s.id AS sale_id,
        s.date AS sale_date,
        s.price AS sale_price,
        s.discount AS sale_discount,
        c.id AS car_id,
        c.license_plate AS car_license_plate,
        c.price AS car_price,
        m.name AS car_model_name,
        m.year AS car_model_year,
        manu.name AS car_manufacturer_name,
        cust.id AS customer_id,
        (cust_person.fname || ' ' || cust_person.lname)::character varying AS customer_name,
        cust_person.email::character varying AS customer_email,
        emp.id AS employee_id,
        (emp_person.fname || ' ' || emp_person.lname)::character varying AS employee_name,
        emp_person.email::character varying AS employee_email
    FROM "CarManager_DB".sales s
    JOIN "CarManager_DB".car c ON s.sales_car_fk = c.id
    JOIN "CarManager_DB".model m ON c.car_model_fk = m.id
    JOIN "CarManager_DB".manufacturer manu ON m.model_manufacturer_fk = manu.id
    JOIN "CarManager_DB".customer cust ON s.sales_customer_fk = cust.id
    JOIN "CarManager_DB".person cust_person ON cust.customer_person_fk = cust_person.id
    JOIN "CarManager_DB".employee emp ON s.sales_employee_fk = emp.id
    JOIN "CarManager_DB".person emp_person ON emp.employee_person_fk = emp_person.id
    WHERE s.id = param_sale_id;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_sales_by_customer(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_sales_by_customer(param_customer_id integer)
 RETURNS TABLE(sale_id integer, sale_date date, sale_price real, sale_discount real, car_id integer, car_license_plate character varying, car_price real, car_model_name character varying, car_model_year integer, car_manufacturer_name character varying, customer_id integer, customer_name character varying, customer_email character varying, employee_id integer, employee_name character varying, employee_email character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        s.id AS sale_id,
        s.date AS sale_date,
        s.price AS sale_price,
        s.discount AS sale_discount,
        c.id AS car_id,
        c.license_plate AS car_license_plate,
        c.price AS car_price,
        m.name AS car_model_name,
        m.year AS car_model_year,
        manu.name AS car_manufacturer_name,
        cust.id AS customer_id,
        (cust_person.fname || ' ' || cust_person.lname)::character varying AS customer_name,
        cust_person.email::character varying AS customer_email,
        emp.id AS employee_id,
        (emp_person.fname || ' ' || emp_person.lname)::character varying AS employee_name,
        emp_person.email::character varying AS employee_email
    FROM "CarManager_DB".sales s
    JOIN "CarManager_DB".car c ON s.sales_car_fk = c.id
    JOIN "CarManager_DB".model m ON c.car_model_fk = m.id
    JOIN "CarManager_DB".manufacturer manu ON m.model_manufacturer_fk = manu.id
    JOIN "CarManager_DB".customer cust ON s.sales_customer_fk = cust.id
    JOIN "CarManager_DB".person cust_person ON cust.customer_person_fk = cust_person.id
    JOIN "CarManager_DB".employee emp ON s.sales_employee_fk = emp.id
    JOIN "CarManager_DB".person emp_person ON emp.employee_person_fk = emp_person.id
	WHERE sales_customer_fk = param_customer_id;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_sales_by_employee(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_sales_by_employee(param_employee_id integer)
 RETURNS TABLE(sale_id integer, sale_date date, sale_price real, sale_discount real, car_id integer, car_license_plate character varying, car_price real, car_model_name character varying, car_model_year integer, car_manufacturer_name character varying, customer_id integer, customer_name character varying, customer_email character varying, employee_id integer, employee_name character varying, employee_email character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        s.id AS sale_id,
        s.date AS sale_date,
        s.price AS sale_price,
        s.discount AS sale_discount,
        c.id AS car_id,
        c.license_plate AS car_license_plate,
        c.price AS car_price,
        m.name AS car_model_name,
        m.year AS car_model_year,
        manu.name AS car_manufacturer_name,
        cust.id AS customer_id,
        (cust_person.fname || ' ' || cust_person.lname)::character varying AS customer_name,
        cust_person.email::character varying AS customer_email,
        emp.id AS employee_id,
        (emp_person.fname || ' ' || emp_person.lname)::character varying AS employee_name,
        emp_person.email::character varying AS employee_email
    FROM "CarManager_DB".sales s
    JOIN "CarManager_DB".car c ON s.sales_car_fk = c.id
    JOIN "CarManager_DB".model m ON c.car_model_fk = m.id
    JOIN "CarManager_DB".manufacturer manu ON m.model_manufacturer_fk = manu.id
    JOIN "CarManager_DB".customer cust ON s.sales_customer_fk = cust.id
    JOIN "CarManager_DB".person cust_person ON cust.customer_person_fk = cust_person.id
    JOIN "CarManager_DB".employee emp ON s.sales_employee_fk = emp.id
    JOIN "CarManager_DB".person emp_person ON emp.employee_person_fk = emp_person.id
	WHERE sales_employee_fk = param_employee_id;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_sales_by_month(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_sales_by_month(param_month integer)
 RETURNS TABLE(sale_id integer, sale_date date, sale_price real, sale_discount real, car_id integer, car_license_plate character varying, car_price real, car_model_name character varying, car_model_year integer, car_manufacturer_name character varying, customer_id integer, customer_name character varying, customer_email character varying, employee_id integer, employee_name character varying, employee_email character varying)
 LANGUAGE plpgsql
AS $function$
BEGIN
    RETURN QUERY
    SELECT
        s.id AS sale_id,
        s.date AS sale_date,
        s.price AS sale_price,
        s.discount AS sale_discount,
        c.id AS car_id,
        c.license_plate AS car_license_plate,
        c.price AS car_price,
        m.name AS car_model_name,
        m.year AS car_model_year,
        manu.name AS car_manufacturer_name,
        cust.id AS customer_id,
        (cust_person.fname || ' ' || cust_person.lname)::character varying AS customer_name,
        cust_person.email::character varying AS customer_email,
        emp.id AS employee_id,
        (emp_person.fname || ' ' || emp_person.lname)::character varying AS employee_name,
        emp_person.email::character varying AS employee_email
    FROM "CarManager_DB".sales s
    JOIN "CarManager_DB".car c ON s.sales_car_fk = c.id
    JOIN "CarManager_DB".model m ON c.car_model_fk = m.id
    JOIN "CarManager_DB".manufacturer manu ON m.model_manufacturer_fk = manu.id
    JOIN "CarManager_DB".customer cust ON s.sales_customer_fk = cust.id
    JOIN "CarManager_DB".person cust_person ON cust.customer_person_fk = cust_person.id
    JOIN "CarManager_DB".employee emp ON s.sales_employee_fk = emp.id
    JOIN "CarManager_DB".person emp_person ON emp.employee_person_fk = emp_person.id
	WHERE EXTRACT(MONTH FROM s.date) = param_month;
END;
$function$
;

-- DROP FUNCTION "CarManager_DB".select_service_by_id(int4);

CREATE OR REPLACE FUNCTION "CarManager_DB".select_service_by_id(_service_id integer)
 RETURNS TABLE(service_tires boolean, service_engine boolean, service_brakes boolean, service_oil boolean, service_battery boolean, service_id integer, service_date date)
 LANGUAGE plpgsql
AS $function$
	begin
	return query (
		select * from "CarManager-DB".Service where id = _service_id
	);
end;
$function$
;

-- DROP PROCEDURE "CarManager_DB".update_car(int4, varchar, float4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_car(IN param_id integer, IN param_license_plate character varying, IN param_price real)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		UPDATE "CarManager_DB".car
		SET
			license_plate = param_license_plate,
			price = param_price
		WHERE
			id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_car(int4, varchar, float4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_car(IN param_id integer, IN param_license_plate character varying, IN param_price real, IN param_model_fk integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		UPDATE "CarManager_DB".car
		SET
			license_plate = param_license_plate,
			price = param_price,
			car_model_fk = param_model_fk
		WHERE
			id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_customer(int4, varchar, varchar, int4, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_customer(IN param_id integer, IN param_fname character varying, IN param_lname character varying, IN param_birth_year integer, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	declare
		person_fk integer;
	begin
		select customer_person_fk into person_fk from "CarManager_DB".Customer where id = param_id;
		update "CarManager_DB".Person set fname = param_fname, lname = param_lname, birth_year = param_birth_year, gender = param_gender, email = param_email where id = person_fk;
	end;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_employee(int4, float4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_employee(IN param_id integer, IN param_salary real)
 LANGUAGE plpgsql
AS $procedure$
	begin
		update "CarManager_DB".Employee set salary = param_salary where id = param_id;
	end;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_employee(int4, float4, varchar, varchar, int4, int4, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_employee(IN param_id integer, IN param_salary real, IN param_fname character varying, IN param_lname character varying, IN param_birth_year integer, IN param_gender integer, IN param_email character varying)
 LANGUAGE plpgsql
AS $procedure$
	declare
		person_fk integer;
	begin
		select employee_person_fk into person_fk from "CarManager_DB".Employee;

		update "CarManager_DB".Employee set salary = param_salary where id = param_id;
		update "CarManager_DB".Person set fname = param_fname, lname = param_lname, birth_year = param_birth_year, gender = param_gender, email = param_email where id = person_fk;
	end;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_manufacturer(int4, varchar, varchar);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_manufacturer(IN param_id integer, IN param_name character varying, IN param_location character varying)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		UPDATE Manufacturer SET name = param_name, location = param_location WHERE id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_model(int4, varchar, int4, int4, int4, int4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_model(IN param_id integer, IN param_name character varying, IN param_type integer, IN param_year integer, IN param_hp integer, IN param_wd integer, IN param_man_id integer)
 LANGUAGE plpgsql
AS $procedure$
	BEGIN
		UPDATE "CarManager_DB".Model
		SET
			"name" = param_name,
			"type" = param_type,
			"year" = param_year,
			hp = param_hp,
			wd = param_wd,
			model_manufacturer_fk = param_man_id
		WHERE id = param_id;
	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_sale(int4, float4, float4, int4, int4, int4);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_sale(IN param_id integer, IN param_price real, IN param_discount real, IN param_car_fk integer, IN param_employee_fk integer, IN param_customer_fk integer)
 LANGUAGE plpgsql
AS $procedure$
	DECLARE
		car_id int;
	BEGIN
		SELECT sales_car_fk INTO car_id
		FROM "CarManager_DB".sales
		WHERE id = param_id;

		-- TODO: Sale disappearing on update
		UPDATE "CarManager_DB".car
		SET sold = false
		WHERE id = car_id;

		UPDATE "CarManager_DB".car
		SET sold = true
		WHERE id = param_car_fk;

		UPDATE "CarManager_DB".sales
		SET
			price = param_price,
			discount = param_discount,
			sales_car_fk = param_car_fk,
			sales_employee_fk = param_employee_fk,
			sales_customer_fk = param_customer_fk
		WHERE
			id = param_id;

	END;
$procedure$
;

-- DROP PROCEDURE "CarManager_DB".update_service(int4, bool, bool, bool, bool, bool);

CREATE OR REPLACE PROCEDURE "CarManager_DB".update_service(IN param_id integer, IN param_tires boolean, IN param_engine boolean, IN param_brakes boolean, IN param_oil boolean, IN param_battery boolean)
 LANGUAGE plpgsql
AS $procedure$
BEGIN
    -- Update all columns, and conditionally update the "date" field
    UPDATE "CarManager_DB".service
    SET
        "date" = CASE
                    WHEN param_tires = TRUE AND param_engine = TRUE
                        AND param_brakes = TRUE AND param_oil = TRUE
                        AND param_battery = TRUE THEN now()
                    ELSE "date"  -- Keeps the original date if condition is not met
                 END,
        tires = param_tires,
        engine = param_engine,
        brakes = param_brakes,
        oil = param_oil,
        battery = param_battery
    WHERE
        id = param_id;
END;
$procedure$
;
